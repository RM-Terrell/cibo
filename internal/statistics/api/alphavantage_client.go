package api

import (
	"fmt"
	"io"
	"net/http"
	"time"
)

/*
The purpose of this module is to act as the communication layer for grabbing stock data
using the Alphavantage API. All URLs will be to alphavantage and this layer should act
purely to return raw byte data to be parsed elsewhere. The goal there being to act on a
consistent contract thus making API swapping in the future a little less painful.

Alphavantage API docs can be found here: https://www.alphavantage.co/documentation/#
*/

type Client struct {
	apiKey     string
	httpClient *http.Client
	baseURL    string
}

func NewClient(apiKey string, baseURL string) *Client {
	return &Client{
		apiKey: apiKey,
		httpClient: &http.Client{
			Timeout: 10 * time.Second,
		},
		baseURL: baseURL,
	}
}

// Retrieve the raw daily time series data for a given stock symbol.
func (c *Client) FetchDailyPrice(symbol string) ([]byte, error) {
	// {
	// "Meta Data": {
	//     "1. Information": "Daily Prices (open, high, low, close) and Volumes",
	//     "2. Symbol": "IBM",
	//     "3. Last Refreshed": "2025-08-22",
	//     "4. Output Size": "Compact",
	//     "5. Time Zone": "US/Eastern"
	// },
	// "Time Series (Daily)": {
	//     "2025-08-22": {
	//         "1. open": "240.7400",
	//         "2. high": "243.6800",
	//         "3. low": "240.2200",
	//         "4. close": "242.0900",
	//         "5. volume": "3134882"
	//     },
	url := fmt.Sprintf(
		"%s/query?function=TIME_SERIES_DAILY&symbol=%s&apikey=%s&outputsize=full",
		c.baseURL,
		symbol,
		c.apiKey,
	)

	resp, err := c.httpClient.Get(url)
	if err != nil {
		return nil, fmt.Errorf("failed to make API request: %w", err)
	}

	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		body, _ := io.ReadAll(resp.Body)
		return nil, fmt.Errorf("API returned non-200 status code: %d, body: %s", resp.StatusCode, string(body))
	}

	bodyBytes, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("failed to read response body: %w", err)
	}

	return bodyBytes, nil
}

// Retrieve the raw earnings data for a given stock symbol. Contains both annual and quarterly data.
func (c *Client) FetchEarnings(symbol string) ([]byte, error) {
	// https://www.alphavantage.co/query?function=EARNINGS&symbol=IBM&apikey=demo -> "annualReports": []
	// https://www.alphavantage.co/query?function=EARNINGS&symbol=IBM&apikey=demo -> "quarterlyEarnings": []
	// {
	//     "symbol": "IBM",
	//     "annualEarnings": [
	//         {
	//             "fiscalDateEnding": "2025-06-30",
	//             "reportedEPS": "4.4"
	//         },
	//         ..
	//      "quarterlyEarnings": [
	//      {
	//         "fiscalDateEnding": "2025-06-30",
	//         "reportedDate": "2025-07-23",
	//         "reportedEPS": "2.8",
	//         "estimatedEPS": "2.65",
	//         "surprise": "0.15",
	//         "surprisePercentage": "5.6604",
	//         "reportTime": "post-market"
	//      },
	url := fmt.Sprintf(
		"%s/query?function=EARNINGS&symbol=%s&apikey=%s",
		c.baseURL,
		symbol,
		c.apiKey,
	)

	resp, err := c.httpClient.Get(url)
	if err != nil {
		return nil, fmt.Errorf("failed to make API request: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		body, _ := io.ReadAll(resp.Body)
		return nil, fmt.Errorf("API returned non-200 status code: %d, body: %s", resp.StatusCode, string(body))
	}

	bodyBytes, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("failed to read response body: %w", err)
	}

	return bodyBytes, nil
}

// Retrieve the overview of a whole company for a given stock symbol.
func (c *Client) FetchOverview(symbol string) ([]byte, error) {
	// https://www.alphavantage.co/query?function=OVERVIEW&symbol=IBM&apikey=demo -> {}
	// 	{
	// 	"Symbol": "IBM",
	// 	"AssetType": "Common Stock",
	// 	"Name": "International Business Machines",
	// 	"Description": "International Business Machines Corporation (IBM) is an American multinational technology company headquartered in Armonk, New York, with operations in over 170 countries. The company began in 1911, founded in Endicott, New York, as the Computing-Tabulating-Recording Company (CTR) and was renamed International Business Machines in 1924. IBM is incorporated in New York. IBM produces and sells computer hardware, middleware and software, and provides hosting and consulting services in areas ranging from mainframe computers to nanotechnology. IBM is also a major research organization, holding the record for most annual U.S. patents generated by a business (as of 2020) for 28 consecutive years. Inventions by IBM include the automated teller machine (ATM), the floppy disk, the hard disk drive, the magnetic stripe card, the relational database, the SQL programming language, the UPC barcode, and dynamic random-access memory (DRAM). The IBM mainframe, exemplified by the System/360, was the dominant computing platform during the 1960s and 1970s.",
	// 	"CIK": "51143",
	// 	"Exchange": "NYSE",
	// 	"Currency": "USD",
	// 	"Country": "USA",
	// 	"Sector": "TECHNOLOGY",
	// 	"Industry": "COMPUTER & OFFICE EQUIPMENT",
	// 	"Address": "1 NEW ORCHARD ROAD, ARMONK, NY, US",
	// 	"OfficialSite": "https://www.ibm.com",
	// 	"FiscalYearEnd": "December",
	// 	"LatestQuarter": "2025-06-30",
	// 	"MarketCapitalization": "224756892000",
	// 	"EBITDA": "14183000000",
	// 	"PERatio": "38.92",
	// 	"PEGRatio": "1.823",
	// 	"BookValue": "29.53",
	// 	"DividendPerShare": "6.69",
	// 	"DividendYield": "0.0279",
	// 	"EPS": "6.2",
	// 	"RevenuePerShareTTM": "69.07",
	// 	"ProfitMargin": "0.0911",
	// 	"OperatingMarginTTM": "0.183",
	// 	"ReturnOnAssetsTTM": "0.0481",
	// 	"ReturnOnEquityTTM": "0.227",
	// 	"RevenueTTM": "64040002000",
	// 	"GrossProfitTTM": "36868002000",
	// 	"DilutedEPSTTM": "6.2",
	// 	"QuarterlyEarningsGrowthYOY": "0.177",
	// 	"QuarterlyRevenueGrowthYOY": "0.077",
	// 	"AnalystTargetPrice": "281.77",
	// 	"AnalystRatingStrongBuy": "1",
	// 	"AnalystRatingBuy": "8",
	// 	"AnalystRatingHold": "9",
	// 	"AnalystRatingSell": "2",
	// 	"AnalystRatingStrongSell": "1",
	// 	"TrailingPE": "38.92",
	// 	"ForwardPE": "21.69",
	// 	"PriceToSalesRatioTTM": "3.51",
	// 	"PriceToBookRatio": "8.11",
	// 	"EVToRevenue": "4.299",
	// 	"EVToEBITDA": "21.34",
	// 	"Beta": "0.677",
	// 	"52WeekHigh": "294.17",
	// 	"52WeekLow": "189.05",
	// 	"50DayMovingAverage": "271.46",
	// 	"200DayMovingAverage": "247.22",
	// 	"SharesOutstanding": "931519000",
	// 	"SharesFloat": "929395000",
	// 	"PercentInsiders": "0.122",
	// 	"PercentInstitutions": "65.499",
	// 	"DividendDate": "2025-09-10",
	// 	"ExDividendDate": "2025-08-08"
	// }
	url := fmt.Sprintf(
		"%s/query?function=OVERVIEW&symbol=%s&apikey=%s",
		c.baseURL,
		symbol,
		c.apiKey,
	)

	resp, err := c.httpClient.Get(url)
	if err != nil {
		return nil, fmt.Errorf("failed to make API request: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		body, _ := io.ReadAll(resp.Body)
		return nil, fmt.Errorf("API returned non-200 status code: %d, body: %s", resp.StatusCode, string(body))
	}

	bodyBytes, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("failed to read response body: %w", err)
	}

	return bodyBytes, nil
}

// Retrieve dividend data for a given stock symbol.
func (c *Client) FetchDividends(symbol string) ([]byte, error) {
	// https://www.alphavantage.co/query?function=DIVIDENDS&symbol=IBM&apikey=demo
	// {
	// "symbol": "IBM",
	// "data": [
	//     {
	//         "ex_dividend_date": "2025-08-08",
	//         "declaration_date": "2025-07-23",
	//         "record_date": "2025-08-08",
	//         "payment_date": "2025-09-10",
	//         "amount": "1.68"
	//     },
	//     {
	//         "ex_dividend_date": "2025-05-09",
	//         "declaration_date": "2025-04-29",
	//         "record_date": "2025-05-09",
	//         "payment_date": "2025-06-10",
	//         "amount": "1.68"
	//     },

	url := fmt.Sprintf(
		"%s/query?function=DIVIDENDS&symbol=%s&apikey=%s",
		c.baseURL,
		symbol,
		c.apiKey,
	)

	resp, err := c.httpClient.Get(url)
	if err != nil {
		return nil, fmt.Errorf("failed to make API request: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		body, _ := io.ReadAll(resp.Body)
		return nil, fmt.Errorf("API returned non-200 status code: %d, body: %s", resp.StatusCode, string(body))
	}

	bodyBytes, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("failed to read response body: %w", err)
	}

	return bodyBytes, nil
}

// Retrieve the next years earnings estimates for a given stock symbol
func (c *Client) FetchEarningsEstimates(symbol string) ([]byte, error) {
	// https://www.alphavantage.co/query?function=EARNINGS_ESTIMATES&symbol=IBM&apikey=demo
	// {
	// "symbol": "IBM",
	// "estimates": [
	//     {
	//         "date": "2026-12-31",
	//         "horizon": "next fiscal year",
	//         "eps_estimate_average": "11.8687",
	//         "eps_estimate_high": "12.7400",
	//         "eps_estimate_low": "10.8000",
	//         "eps_estimate_analyst_count": "21.0000",
	//         "eps_estimate_average_7_days_ago": "11.6526",
	//         "eps_estimate_average_30_days_ago": "11.6096",
	//         "eps_estimate_average_60_days_ago": "11.6134",
	//         "eps_estimate_average_90_days_ago": "11.5796",
	//         "eps_estimate_revision_up_trailing_7_days": "14.0000",
	//         "eps_estimate_revision_down_trailing_7_days": null,
	//         "eps_estimate_revision_up_trailing_30_days": "16.0000",
	//         "eps_estimate_revision_down_trailing_30_days": "2.0000",
	//         "revenue_estimate_average": "69583738570.00",
	//         "revenue_estimate_high": "70787666650.00",
	//         "revenue_estimate_low": "68408000000.00",
	//         "revenue_estimate_analyst_count": "21.00"
	//     },
	// the next is current year, all after that are historical so just use the first
	url := fmt.Sprintf(
		"%s/query?function=EARNINGS_ESTIMATES&symbol=%s&apikey=%s",
		c.baseURL,
		symbol,
		c.apiKey,
	)

	resp, err := c.httpClient.Get(url)
	if err != nil {
		return nil, fmt.Errorf("failed to make API request: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		body, _ := io.ReadAll(resp.Body)
		return nil, fmt.Errorf("API returned non-200 status code: %d, body: %s", resp.StatusCode, string(body))
	}

	bodyBytes, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("failed to read response body: %w", err)
	}

	return bodyBytes, nil
}

// Retrieve stock split data for a specific ticker
func (c *Client) FetchStockSplits(symbol string) ([]byte, error) {
	// https://www.alphavantage.co/query?function=SPLITS&symbol=NVDA&apikey=demo
	// 	{
	//     "symbol": "NVDA",
	//     "data": [
	//         {
	//             "effective_date": "2024-06-10",
	//             "split_factor": "10.0000"
	//         },
	//         {
	//             "effective_date": "2021-07-20",
	//             "split_factor": "4.0000"
	//         },
	//         {
	//             "effective_date": "2007-09-11",
	//             "split_factor": "1.5000"
	//         },
	//         {
	//             "effective_date": "2006-04-07",
	//             "split_factor": "2.0000"
	//         },
	//         {
	//             "effective_date": "2001-09-17",
	//             "split_factor": "2.0000"
	//         },
	//         {
	//             "effective_date": "2000-06-27",
	//             "split_factor": "2.0000"
	//         }
	//     ]
	// }

	url := fmt.Sprintf(
		"%s/query?function=SPLITS&symbol=%s&apikey=%s",
		c.baseURL,
		symbol,
		c.apiKey,
	)

	resp, err := c.httpClient.Get(url)
	if err != nil {
		return nil, fmt.Errorf("failed to make API request: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		body, _ := io.ReadAll(resp.Body)
		return nil, fmt.Errorf("API returned non-200 status code: %d, body: %s", resp.StatusCode, string(body))
	}

	bodyBytes, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("failed to read response body: %w", err)
	}

	return bodyBytes, nil
}
